openapi: 3.0.3
info:
  title: Camera Surveillance API
  version: 1.0.0
  description: |
    ðŸ“¹ Minimal camera management API for learning OpenAPI basics.

    **Learning Goals:**
    - CRUD operations (Create, Read, Update, Delete)
    - Path parameters
    - Query parameters
    - Request/response schemas
    - Enums

    **Perfect for beginners!** Just 2 schemas and 5 endpoints.

  contact:
    name: Workshop Team
    email: workshop@example.com

servers:
  - url: http://localhost:4010
    description: Mock development server

tags:
  - name: Cameras
    description: Camera management operations

paths:
  /cameras:
    get:
      tags:
        - Cameras
      summary: List all cameras
      description: Get a list of all cameras in the system
      operationId: listCameras
      parameters:
        - name: status
          in: query
          description: Filter cameras by status
          required: false
          schema:
            type: string
            enum:
              - online
              - offline
            example: "online"
      responses:
        '200':
          description: List of cameras
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Camera'
              examples:
                cameras:
                  summary: Example camera list
                  value:
                    - id: "cam-001"
                      name: "Front Entrance"
                      location: "Building A"
                      status: "online"
                    - id: "cam-002"
                      name: "Parking Lot"
                      status: "online"

    post:
      tags:
        - Cameras
      summary: Create a new camera
      description: Register a new camera in the system
      operationId: createCamera
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "Warehouse Camera"
                location:
                  type: string
                  maxLength: 200
                  example: "Building B"
            examples:
              newCamera:
                summary: Create new camera
                value:
                  name: "Warehouse Camera"
                  location: "Building B"
      responses:
        '201':
          description: Camera created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cameras/{cameraId}:
    get:
      tags:
        - Cameras
      summary: Get camera by ID
      description: Retrieve detailed information about a specific camera
      operationId: getCameraById
      parameters:
        - name: cameraId
          in: path
          required: true
          description: Unique camera identifier
          schema:
            type: string
            example: "cam-001"
      responses:
        '200':
          description: Camera details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'
        '404':
          description: Camera not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Cameras
      summary: Update camera
      description: Update an existing camera's information
      operationId: updateCamera
      parameters:
        - name: cameraId
          in: path
          required: true
          description: Unique camera identifier
          schema:
            type: string
            example: "cam-001"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "Updated Camera Name"
                location:
                  type: string
                  maxLength: 200
                  example: "Building C"
                status:
                  type: string
                  enum:
                    - online
                    - offline
                  example: "offline"
      responses:
        '200':
          description: Camera updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Camera'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Camera not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Cameras
      summary: Delete camera
      description: Remove a camera from the system
      operationId: deleteCamera
      parameters:
        - name: cameraId
          in: path
          required: true
          description: Unique camera identifier
          schema:
            type: string
            example: "cam-001"
      responses:
        '204':
          description: Camera deleted successfully
        '404':
          description: Camera not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Camera:
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: string
          description: Unique camera identifier
          example: "cam-001"
        name:
          type: string
          description: Camera display name
          example: "Front Entrance"
        location:
          type: string
          description: Physical location of the camera
          example: "Building A"
        status:
          type: string
          enum:
            - online
            - offline
          description: Current operational status
          example: "online"

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
          example: "CAMERA_NOT_FOUND"
        message:
          type: string
          description: Human-readable error message
          example: "Camera with ID 'cam-999' not found"