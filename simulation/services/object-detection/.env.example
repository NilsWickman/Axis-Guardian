# Object Detection Service Configuration

# RTSP Camera Streams
CAMERA1_URL=rtsp://localhost:8554/camera1
CAMERA2_URL=rtsp://localhost:8554/camera2
CAMERA3_URL=rtsp://localhost:8554/camera3

# MQTT Broker
MQTT_HOST=localhost
MQTT_PORT=1883
MQTT_TOPIC_PREFIX=surveillance/detections

# Detection Settings
CONFIDENCE_THRESHOLD=0.5
IOU_THRESHOLD=0.45
MODEL_SIZE=yolov8n  # Options: yolov8n (nano), yolov8s (small), yolov8m (medium), yolov8l (large)

# Target Classes (COCO dataset)
# person, car, truck, bus, motorbike, bicycle, etc.
DETECT_CLASSES=person,car,truck,bus,motorbike,bicycle

# Performance
FRAME_SKIP=2  # Process every Nth frame (1 = every frame, 2 = every other frame)
MAX_FPS=15    # Maximum processing FPS

# Timestamp Synchronization
# Adjust detection timestamps to compensate for video player latency (milliseconds)
# NEGATIVE values make detections appear OLDER (use when boxes appear AHEAD of video)
# POSITIVE values make detections appear NEWER (use when boxes LAG BEHIND video)
#
# For HLS player (high latency ~10-30 seconds):
#   Set NEGATIVE value: -10000 to -30000 (detections 10-30 seconds in the past)
# For WebRTC player (low latency ~0.5-2 seconds):
#   Set NEGATIVE value: -500 to -2000 (detections 0.5-2 seconds in the past)
# For direct RTSP player (very low latency):
#   Set to 0 or small negative value: 0 to -500
#
# Example for HLS: DETECTION_DELAY_MS=-15000  (detections appear 15 seconds older)
DETECTION_DELAY_MS=0

# PTS-Based Timestamp Tracking (for looped videos)
# When enabled, uses video presentation timestamps (PTS) instead of wall-clock time
# This prevents timestamp drift when videos loop (e.g., FFmpeg -stream_loop -1)
# Recommended: true for looped mock videos, false for live camera feeds
USE_VIDEO_PTS=true

# PTS Reset Threshold (milliseconds)
# Threshold for detecting video loops - when PTS jumps backward by this amount,
# a loop is detected and timestamps are adjusted to maintain continuity
# Set to ~50% of your video duration (e.g., 30s video = 15000ms threshold)
# Default 5000ms works for most videos 10-60 seconds long
PTS_RESET_THRESHOLD_MS=5000.0

# Adaptive Synchronization (Bidirectional Feedback Loop)
# Dynamically adjusts detection timestamps based on real-time HLS latency measurements
# The frontend measures actual video playback lag and sends feedback via MQTT
# The backend adapts timestamps automatically to maintain perfect sync
ENABLE_ADAPTIVE_SYNC=true

# Sync Adaptation Rate (0.1-1.0)
# Controls how quickly the system responds to latency changes
# Higher = faster adaptation but more jitter (0.5-0.7 for variable networks)
# Lower = smoother adjustments but slower response (0.2-0.3 for stable networks)
# Recommended: 0.3 for most use cases
SYNC_ADAPTATION_RATE=0.3

# Maximum Single Correction (milliseconds)
# Limits how much the offset can change in one adjustment
# Prevents wild swings from temporary glitches or bad measurements
# Should be large enough to handle real latency changes but not too aggressive
# Recommended: 5000ms (allows adjusting from -10s to -15s offset gradually)
SYNC_MAX_CORRECTION_MS=5000.0

# Target Sync Error (milliseconds)
# Defines "good" sync quality threshold
# System aims to keep sync error below this value
# Recommended: 500ms for smooth experience, 200ms for high accuracy
SYNC_TARGET_ERROR_MS=500.0

# Logging
LOG_LEVEL=INFO
